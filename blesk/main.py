import logging
import time

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove
from aiogram.utils import executor
import asyncio
import csv
import pandas as pd
import yookassa

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
API_TOKEN = '7832082508:AAH0oww7qfosltq1bjouXJCNucrHfiCIF70'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
data = '../data.csv'


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    name = State()
    email = State()
    choice = State()
    current_task = State()
    offer = State()
    phone = State()
    feedback = State()
    other_question = State()
    remind = State()
    blesk = State()

def check_user_in_csv(user_id):
    with open(data, mode='r', newline='', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if str(row[0]) == str(user_id):
                return row  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
    return None  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç

def update_data(user_id, title, value):
    df = pd.read_csv('data.csv').set_index('id')
    df.loc[user_id, title] = value
    df.to_csv('data.csv')

def delete_row(user_id):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame, –∏—Å–ø–æ–ª—å–∑—É—è 'user_id' –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
    df = pd.read_csv('data.csv', index_col='id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in df.index:
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
        df = df.drop(index=user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        df.to_csv('data.csv')
        print(f"–°—Ç—Ä–æ–∫–∞ —Å user_id={user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    found = check_user_in_csv(user_id)
    if found is not None:
        await message.answer(
            "üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ú–µ–Ω—è –∑–æ–≤—É—Ç –¢—ë—Ç—è –ë–ª–µ—Å–∫, –∏ —è ‚Äî –ø–æ–º–æ—â–Ω–∏—Ü–∞ –í–∞–ª–µ—Ä–∏–∏ –ñ–∏–ª–∏—á –≤ —ç—Ç–æ–º –ø—Ä–∞–∫—Ç–∏–∫—É–º–µ. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –º–µ–Ω—è –∫–∞–∫ —Å–≤–µ–∫—Ä–æ–≤—å, –∫–æ—Ç–æ—Ä–∞—è —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–µ–º, –∫–∞–∫ —Ç—ã –≤–µ–¥–µ—à—å —Ö–æ–∑—è–π—Å—Ç–≤–æ. –£ –º–µ–Ω—è –≥–ª–∞–∑-–∞–ª–º–∞–∑, —è –≤–∏–∂—É –≤—Å–µ –º–µ–ª–æ—á–∏! üòè")

    else:
        await message.answer("–ß—ë—Ç —è —Ç—è –Ω–µ –≤–∏–∂—É –≤ –±–∞–∑–µ! –û–±—Ä–∞—Ç–∏—Å—å –∫ –í–∞–ª–µ—Ä–∏–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!!")
    await Form.name.set()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)