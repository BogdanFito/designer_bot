import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import asyncio
import csv

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
API_TOKEN = '6976460514:AAG89jfnmFMr1Afv_iytwW8NwvCzCL1cOwU'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
data = '../data.csv'


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    name = State()
    email = State()
    phone = State()
    feedback = State()
    other_question = State()

def check_user_in_csv(user_id):
    with open(data, mode='r', newline='', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if str(row[0]) == str(user_id):
                return row  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
    return None  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    user_id = message.from_user.id

    with open(data, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([user_id, None, None, None, "name", None, None, None, None])

    await message.answer(
        "üêæ–ú—è—É! –ü—Ä–∏–≤–µ—Ç, —è –ë–∏—Å–∫–≤–∏—Ç–∏–∫, —Ç–≤–æ–π –¥–æ–±—Ä—ã–π –∏ –ª–∞—Å–∫–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –î–∞–≤–∞–π –ø–æ–¥—Ä—É–∂–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üòª")
    await Form.name.set()


# –°–±–æ—Ä –∏–º–µ–Ω–∏
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        f"üêæ–ú—É—Ä—Ä, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}! –û—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, —á—Ç–æ–±—ã –º—ã –≤—Å–µ–≥–¥–∞ –º–æ–≥–ª–∏ –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏! üíå")
    await Form.email.set()


# –°–±–æ—Ä email
@dp.message_handler(state=Form.email)
async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    share_phone_button = KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(share_phone_button)
    await message.answer("üêæ–ú—è—É, –µ—â—ë –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤—è–∑–∏! üì±", reply_markup=keyboard)
    await Form.phone.set()


# –°–±–æ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(content_types=types.ContentType.CONTACT, state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await state.update_data(phone=message.contact.phone_number)
    await message.answer(
        "üêæ–û—Ö, —Ç—ã –∑–Ω–∞–µ—à—å, —É —Ö–æ–∑—è–π–∫–∏ –µ—Å—Ç—å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è! üåü –ü—Ä–∞–∫—Ç–∏–∫—É–º '–ß–∏—Å—Ç—ã–π –¥–æ–º' üåü ‚Äî —ç—Ç–æ —Ç–≤–æ–π –∫–ª—é—á –∫ —É—é—Ç—É –∏ –ø–æ—Ä—è–¥–∫—É. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: [—Å—Å—ã–ª–∫–∞]",
        reply_markup=types.ReplyKeyboardRemove())
    # —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º follow-up
    await state.set_state(None)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    await bot.send_message(message.chat.id, "üêæ –ú—è—É-–º—è—É! –ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É:")

    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    feedback_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    feedback_keyboard.add("üí∏ –¶–µ–Ω–∞ –≤—ã—Å–æ–∫–∞", "‚è≥ –ë–æ—é—Å—å, —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∏—Ç –≤—Ä–µ–º–µ–Ω–∏", "ü§î –ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç",
                          "üí≠ –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å")
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏—á–∏–Ω—É, –∏ —è –º—É—Ä–ª—ã–∫–Ω—É –≤ –æ—Ç–≤–µ—Ç! üò∏", reply_markup=feedback_keyboard)
    await Form.feedback.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–∞
@dp.message_handler(state=Form.feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    if message.text == "üí∏ –¶–µ–Ω–∞ –≤—ã—Å–æ–∫–∞":
        await message.answer(
            "üêæ–ú—É—Ä-–º—É—Ä, –ø–æ–Ω–∏–º–∞—é, 2000 —Ä—É–±–ª–µ–π –º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π, –Ω–æ —ç—Ç–æ —Ü–µ–ª—ã–π –º–µ—Å—è—Ü –¥–æ—Å—Ç—É–ø–∞!")
    elif message.text == "‚è≥ –ë–æ—é—Å—å, —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∏—Ç –≤—Ä–µ–º–µ–Ω–∏":
        await message.answer(
            "üêæ–ú—É—Ä, –±–æ–∏—à—å—Å—è, —á—Ç–æ –Ω–µ —É—Å–ø–µ–µ—à—å? –ü—Ä–∞–∫—Ç–∏–∫—É–º –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∑–∞ 3 –¥–Ω—è, –Ω–æ –¥–æ—Å—Ç—É–ø ‚Äî —Ü–µ–ª—ã–π –º–µ—Å—è—Ü! üìÖ")
    elif message.text == "ü§î –ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç":
        await message.answer("üêæ–ú—É—Ä—Ä, —Ç—ã –±—É–¥–µ—à—å —É–¥–∏–≤–ª—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º! –†–∞—Å—Ö–ª–∞–º–ª–µ–Ω–∏–µ –∏ —É–±–æ—Ä–∫–∞ —Å–¥–µ–ª–∞—é—Ç —Ç–≤–æ–π –¥–æ–º —É—é—Ç–Ω—ã–º! üè°‚ú®")
    elif message.text == "üí≠ –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å":
        await message.answer("üêæ–ú—è—É! –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º–æ—è —Ö–æ–∑—è–π–∫–∞ –í–∞–ª–µ—Ä–∏—è —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç!")
        await Form.other_question.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.message_handler(state=Form.other_question)
async def process_other_question(message: types.Message, state: FSMContext):
    await message.answer("üêæ –Ø –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ö–æ–∑—è–π–∫–µ. –°–∫–æ—Ä–æ –æ–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç!")
    await state.finish()


# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
async def remind_payment(user_id):
    await bot.send_message(user_id, "üêæ –ú—è—É, —ç—Ç–æ —Å–Ω–æ–≤–∞ –ë–∏—Å–∫–≤–∏—Ç–∏–∫! –ü—Ä–∞–∫—Ç–∏–∫—É–º '–ß–∏—Å—Ç—ã–π –¥–æ–º' –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç —Ç–µ–±—è! üè°üíô")

async def on_startup(_):
    arr = []  # –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å —é–∑–µ—Ä_–∞–π–¥–∏
    for user_id in arr:
        await bot.send_message(chat_id=user_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await asyncio.sleep(1)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
